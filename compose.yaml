services:
  image-redis:
    image: redis:7-alpine
    container_name: image-redis
    volumes:
      - ./dockerdata/redis/data:/data
    networks:
      - imagenet
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 60s
      interval: 60s
    command: redis-server --appendonly yes

  image-postgres:
    image: postgres:16-alpine
    container_name: image-postgres
    environment:
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./dockerdata/postgres/16/data:/var/lib/postgresql/data/pgdata
    networks:
      - imagenet
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      start_period: 60s
      interval: 60s

  image-gotenberg:
    image: gotenberg/gotenberg
    container_name: image-gotenberg
    environment:
      - GOTENBERG_PORT=${GOTENBERG_PORT:-4000}
    expose:
      - ${GOTENBERG_PORT:-4000}
    networks:
      - imagenet
    command: ["gotenberg", "--api-port-from-env", "GOTENBERG_PORT"]
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:$$GOTENBERG_PORT/health || exit 1" ]
      start_period: 60s
      interval: 60s

  image-django:
    build: ./src
    image: image-django
    container_name: image-django
    env_file:
      - .env
    volumes:
      - ./src:/django
      - ./logs:/logs
      - $MEDIA_DIR:/django/assets/media
    networks:
      - imagenet
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8300/health || exit 1" ]
      start_period: 60s
      interval: 60s
    depends_on: &depends_on
      image-postgres:
        condition: service_healthy
      image-redis:
        condition: service_healthy
      image-gotenberg:
        condition: service_healthy

  image-rq-worker:
    build: ./src
    image: image-django
    container_name: image-rq-worker
    env_file:
      - .env
    volumes_from:
      - image-django
    networks:
      - imagenet
    restart: always
    depends_on: *depends_on
    command: python manage.py rqworker --with-scheduler default

  image-cron:
    image: paradoxon/alpine-cron
    container_name: image-cron
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/cron/crontab:/tmp/crontab
    network_mode: "none"
    restart: always

networks:
  imagenet:
